name: Release
on:
  push:
    tags:
      - "facti/v[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: write

jobs:
  defines:
    name: Define variables
    runs-on: ubuntu-latest
    outputs:
      package: ${{ steps.set-variables.outputs.package }}
      tag: ${{ steps.set-variables.outputs.tag }}
      version: ${{ steps.set-variables.outputs.version }}
      is_prerelease: ${{ steps.set-variables.outputs.is_prerelease == 'true' }}
    steps:
      - name: Set variables
        id: set-variables
        shell: bash
        run: |
          tag="${GITHUB_REF_NAME}"
          package="${tag%%/*}"
          version="${tag#*/}"
          is_prerelease="false"
          if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+.+$ ]]; then
            is_prerelease="true"
          fi
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "FACTI_TAG=${tag}" >> "$GITHUB_ENV"
          echo "package=${package}" >> "$GITHUB_OUTPUT"
          echo "FACTI_PACKAGE=${package}" >> "$GITHUB_ENV"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "FACTI_VERSION=${version}" >> "$GITHUB_ENV"
          echo "is_prerelease=${is_prerelease}" >> "$GITHUB_OUTPUT"
          echo "FACTI_IS_PRERELEASE=${is_prerelease}" >> "$GITHUB_ENV"
          echo "Tag: ${tag}"
          echo "Package: ${package}"
          echo "Version: ${version}"
          echo "Is prerelease?: ${is_prerelease}"
  create-release:
    name: Create Release
    needs: defines
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create GitHub release
        shell: bash
        run: |
          gh release create \
            --draft \
            --prerelease=${{ needs.defines.outputs.is_prerelease }}
            --generate-notes \
            --title "${{ needs.defines.outputs.version }}" \
            --verify-tag \
            "${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ github.token }}
  build-release:
    name: Build Release
    needs: [defines, create-release]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: "--target ${{ matrix.target }}"
      TARGET_DIR: "./target/${{ matrix.target }}"
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, macos-arm, win-msvc]
        rust: [stable]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false
          - build: linux
            os: ubuntu-latest
            target: i686-unknown-linux-musl
            cross: true
          - build: linux-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - build: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
            cross: false
          - build: win-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install musl-dev musl-tools zstd
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Setup cross
        if: matrix.cross == true
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show cargo command
        run: |
          echo "cross is: ${{ matrix.cross }}"
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target is: ${{ matrix.target }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
      - name: Build release binary
        run: ${{ env.CARGO }} build --release --all-features --locked --verbose --package facti ${{ env.TARGET_FLAGS }}
      - name: Build manpages
        if: matrix.build != 'win-msvc'
        run: ${{ env.CARGO }} xtask-ci man
      - name: Generate completions
        run: |
          mkdir -p target/assets/completion
          cargo run --release --package facti -- completion zsh > target/assets/completion/_facti
          cargo run --release --package facti -- completion bash > target/assets/completion/facti.bash
          cargo run --release --package facti -- completion fish > target/assets/completion/facti.fish
          cargo run --release --package facti -- completion powershell > target/assets/completion/_facti.ps1
      - name: Strip release binary (linux, macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "${{ env.TARGET_DIR}}/release/facti"
      - name: Build release archives
        shell: bash
        run: |
          dist="target/dist"
          mkdir -p "$dist"
          staging="facti-${{ needs.defines.outputs.version }}-${{ matrix.target }}"
          mkdir -p "$staging"/completion

          cp {README.md,LICENSE} "$staging"
          cp crates/cli/CHANGELOG.md "$staging"
          cp target/assets/completion/* "$staging"/completion

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "${{ env.TARGET_DIR }}/release/facti.exe" "$staging/"
            7z a "$dist/$staging.zip" "$staging"
            certutil -hashfile "$dist/$staging.zip" SHA512 > "$dist/$staging.zip.sha512"
            echo "ASSET=$dist/$staging.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$dist/$staging.zip.sha512" >> $GITHUB_ENV
          else
            cp "${{ env.TARGET_DIR }}/release/facti" "$staging/"
            mkdir "$staging"/man
            cp target/assets/man/* "$staging"/man
            tar --zstd -cvf "$dist/$staging.tar.zst" "$staging"
            shasum -a 512 "$dist/$staging.tar.zst" > "$dist/$staging.tar.zst.sha512"
            echo "ASSET=$dist/$staging.tar.zst" >> $GITHUB_ENV
            echo "ASSET_SUM=$dist/$staging.tar.zst.sha512" >> $GITHUB_ENV
          fi
      - name: Upload release archives
        run: gh release upload ${{ github.ref_name }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}
        env:
          GH_TOKEN: ${{ github.token }}
  publish-release:
    name: Publish release
    needs: [create-release, build-release]
    if: needs.create-release.result == 'success' && (needs.build-release.result == 'skipped' || needs.build-release.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Publish release (mark as non-draft)
        run: gh release edit ${{ github.ref_name }} --draft=false
