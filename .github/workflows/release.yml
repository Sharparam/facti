name: Release
on:
  push:
    tags:
      - "facti/v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      facti_version: ${{ env.FACTI_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get release version from tag
        shell: bash
        run: |
          echo "FACTI_VERSION=${GITHUB_REF_NAME##cli/}" >> $GITHUB_ENV
          echo "Version is: ${{ env.FACTI_VERSION }}"
      - name: Create GitHub release
        run: |
          gh release create \
            --draft \
            --generate-notes \
            --title "${{ env.FACTI_VERSION }}" \
            --verify-tag \
            "${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ github.token }}
  build-release:
    name: Build Release
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: "--target ${{ matrix.target }}"
      TARGET_DIR: "./target/${{ matrix.target }}"
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc]
        rust: [stable]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false
          - build: linux-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - build: win-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install musl-dev musl-tools zstd
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Setup cross
        if: matrix.cross == true
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show cargo command
        run: |
          echo "cross is: ${{ matrix.cross }}"
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target is: ${{ matrix.target }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
      - name: Build release binary
        run: ${{ env.CARGO }} build --release --all-features --locked --verbose --package facti ${{ env.TARGET_FLAGS }}
      - name: Build manpages
        if: matrix.build != 'win-msvc'
        run: ${{ env.CARGO }} xtask-ci man
      - name: Generate completions
        run: |
          mkdir -p target/assets/completion
          ${{ env.CARGO }} run --release --package facti -- completion zsh > target/assets/completion/_facti
          ${{ env.CARGO }} run --release --package facti -- completion bash > target/assets/completion/facti.bash
          ${{ env.CARGO }} run --release --package facti -- completion fish > target/assets/completion/facti.fish
          ${{ env.CARGO }} run --release --package facti -- completion powershell > target/assets/completion/_facti.ps1
      - name: '[DEBUG] Post-build state'
        run: |
          echo "Current dir: $PWD"
          echo "LS of current dir:"
          ls -la
          echo "LS of target:"
          ls -la target
          echo "LS of ${{ env.TARGET_DIR }}:"
          ls -la "${{ env.TARGET_DIR }}"
          echo "LS of ${{ env.TARGET_DIR }}/release:"
          ls -la "${{ env.TARGET_DIR }}/release"
      - name: Strip release binary (linux, macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "${{ env.TARGET_DIR}}/release/facti"
      - name: Build release archives
        shell: bash
        run: |
          dist="target/dist"
          mkdir -p "$dist"
          staging="facti-${{ needs.create-release.outputs.facti_version }}-${{ matrix.target }}"
          mkdir -p "$staging"/completion

          cp {README.md,LICENSE} "$staging"
          cp crates/cli/CHANGELOG.md "$staging"
          cp target/assets/completion/* "$staging"/completion

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "${{ env.TARGET_DIR }}/release/facti.exe" "$staging/"
            7z a "$dist/$staging.zip" "$staging"
            certutil -hashfile "$dist/$staging.zip" SHA512 > "$dist/$staging.zip.sha512"
          else
            cp "${{ env.TARGET_DIR }}/release/facti" "$staging/"
            mkdir "$staging"/man
            cp target/assets/man/* "$staging"/man
            tar -czvf "$dist/$staging.tar.gz" "$staging"
            shasum -a 512 "$dist/$staging.tar.gz" > "$dist/$staging.tar.gz.sha512"
            tar --zstd -cvf "$dist/$staging.tar.zst" "$staging"
            shasum -a 512 "$dist/$staging.tar.zst" > "$dist/$staging.tar.zst.sha512"
          fi
      - name: Upload release archives
        run: gh release upload ${{ needs.create-release.outputs.facti_version }} target/dist/*
        env:
          GH_TOKEN: ${{ github.token }}
